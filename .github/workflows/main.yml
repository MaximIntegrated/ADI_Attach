name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_android:
    name: Create Android Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Set App Version
        run: |
          VERSION=$(awk '/version:/ {print $2}' pubspec.yaml | tr -d '\r')
          VERSION="${VERSION}.${{github.run_number}}"
          echo $VERSION
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Download Android keystore
        id: android_keystore
        uses: timheuer/base64-to-file@v1.0.3
        with:
          fileName: upload-keystore.jks
          encodedString: ${{ secrets.LMAXIM_SIGNING_KEY }}
      - name: Create key.properties
        run: |
          echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > android/key.properties
          echo "storePassword=${{ secrets.LMAXIM_KEY_STORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.LMAXIM_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.LMAXIM_KEY_ALIAS }}" >> android/key.properties
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: "11"
          cache: gradle
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.3.9"
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get
      
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "10.0"

      - name: Generate C to Dart files
        run: dart run ffigen

      - name: Start Android Appbundle Release Build
        run: flutter build appbundle --release
      
      - name: Start Android APK Release Build
        run: flutter build apk --release

      - name: Prepare Release
        run: |
          # Create release folder and add all related files here
          mkdir release
          mv build/app/outputs/bundle/release/app-release.aab release/adi_attach_android_v${VERSION}.aab
          mv build/app/outputs/apk/release/app-release.apk release/adi_attach_android_v${VERSION}.apk
        
      - name: Upload Android Release
        uses: actions/upload-artifact@v2
        with:
          name: adi_attach_android_v${{env.VERSION}}
          path: release/**


  build_ios:
    name: Build iOS
    runs-on: macos-latest
    env:
      SHEME: Runner
      BUILD_CONFIGURATION: Release
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Set App Version
        run: |
          VERSION=$(awk '/version:/ {print $2}' pubspec.yaml | tr -d '\r')
          VERSION="${VERSION}.${{github.run_number}}"
          echo $VERSION
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Install the Apple certificate and provisioning profile 
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.DEVELOPMENT_P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.P12_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.3.9"
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "10.0"

      - name: Generate C to Dart files
        run: dart run ffigen

      # Build and sign the ipa using a single flutter command
      - name: Building IPA
        run: flutter build ipa --release --export-options-plist=ios/Runner/ExportOptions.plist
          
      # Collect the file and upload as artifact         
      - name: collect ipa artifacts
        uses: actions/upload-artifact@v2
        with:
         name: release-ipa
         # Path to the release files
         path: build/ios/ipa/*.ipa

      # Important! Cleanup: remove the certificate and provisioning profile from the runner!
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
